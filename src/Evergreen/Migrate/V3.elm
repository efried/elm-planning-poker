module Evergreen.Migrate.V3 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.com/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V1.Types
import Evergreen.V3.Types
import Lamdera.Migrations exposing (..)
import Maybe


frontendModel : Evergreen.V1.Types.FrontendModel -> ModelMigration Evergreen.V3.Types.FrontendModel Evergreen.V3.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V1.Types.BackendModel -> ModelMigration Evergreen.V3.Types.BackendModel Evergreen.V3.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V1.Types.FrontendMsg -> MsgMigration Evergreen.V3.Types.FrontendMsg Evergreen.V3.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V1.Types.ToBackend -> MsgMigration Evergreen.V3.Types.ToBackend Evergreen.V3.Types.BackendMsg
toBackend old =
    MsgMigrated ( migrate_Types_ToBackend old, Cmd.none )


backendMsg : Evergreen.V1.Types.BackendMsg -> MsgMigration Evergreen.V3.Types.BackendMsg Evergreen.V3.Types.BackendMsg
backendMsg old =
    MsgMigrated ( migrate_Types_BackendMsg old, Cmd.none )


toFrontend : Evergreen.V1.Types.ToFrontend -> MsgMigration Evergreen.V3.Types.ToFrontend Evergreen.V3.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V1.Types.BackendModel -> Evergreen.V3.Types.BackendModel
migrate_Types_BackendModel old =
    old |> Dict.map (\k -> migrate_Types_Room)


migrate_Types_FrontendModel : Evergreen.V1.Types.FrontendModel -> Evergreen.V3.Types.FrontendModel
migrate_Types_FrontendModel old =
    { room = old.room |> Maybe.map migrate_Types_Room
    , scoreSelection = old.scoreSelection
    , enteredRoomCode = old.enteredRoomCode
    , pointOptions = [ 1, 2, 4, 8, 16, 24, 36, 48, 72 ]
    , hideStats = old.hideStats
    }


migrate_Types_BackendMsg : Evergreen.V1.Types.BackendMsg -> Evergreen.V3.Types.BackendMsg
migrate_Types_BackendMsg old =
    case old of
        Evergreen.V1.Types.NoOpBackendMsg ->
            Evergreen.V3.Types.NoOpBackendMsg

        Evergreen.V1.Types.ClientConnected p0 p1 ->
            Evergreen.V3.Types.ClientConnected p0 p1

        Evergreen.V1.Types.ClientDisconnected p0 p1 ->
            Evergreen.V3.Types.ClientDisconnected p0 p1

        Evergreen.V1.Types.KeyCreated p0 p1 ->
            Evergreen.V3.Types.KeyCreated p0 [ 1, 2, 4, 8, 16, 24, 36, 48, 72 ] p1


migrate_Types_FrontendMsg : Evergreen.V1.Types.FrontendMsg -> Evergreen.V3.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V1.Types.NoOpFrontendMsg ->
            Evergreen.V3.Types.NoOpFrontendMsg

        Evergreen.V1.Types.PlanningRoomCreated ->
            Evergreen.V3.Types.PlanningRoomCreated

        Evergreen.V1.Types.ScoreSelected p0 p1 ->
            Evergreen.V3.Types.ScoreSelected (p0 |> migrate_Types_Room) p1

        Evergreen.V1.Types.RoomCodeEntered p0 ->
            Evergreen.V3.Types.RoomCodeEntered p0

        Evergreen.V1.Types.RequestPlanningRoom ->
            Evergreen.V3.Types.RequestPlanningRoom

        Evergreen.V1.Types.LeftPlanningRoom ->
            Evergreen.V3.Types.LeftPlanningRoom

        Evergreen.V1.Types.ToggleStats ->
            Evergreen.V3.Types.ToggleStats

        Evergreen.V1.Types.ResetRoom p0 ->
            Evergreen.V3.Types.ResetRoom (p0 |> migrate_Types_Room)


migrate_Types_Room : Evergreen.V1.Types.Room -> Evergreen.V3.Types.Room
migrate_Types_Room old =
    { key = old.key
    , pointOptions = [ 1, 2, 4, 8, 16, 24, 36, 48, 72 ]
    , points = old.points
    }


migrate_Types_ToBackend : Evergreen.V1.Types.ToBackend -> Evergreen.V3.Types.ToBackend
migrate_Types_ToBackend old =
    case old of
        Evergreen.V1.Types.NoOpToBackend ->
            Evergreen.V3.Types.NoOpToBackend

        Evergreen.V1.Types.CreatePlanningRoom ->
            Evergreen.V3.Types.CreatePlanningRoom [ 1, 2, 4, 8, 16, 24, 36, 48, 72 ]

        Evergreen.V1.Types.JoinPlanningRoom p0 ->
            Evergreen.V3.Types.JoinPlanningRoom p0

        Evergreen.V1.Types.LeavePlanningRoom ->
            Evergreen.V3.Types.LeavePlanningRoom

        Evergreen.V1.Types.UpdateClientScore p0 p1 ->
            Evergreen.V3.Types.UpdateClientScore p0 p1

        Evergreen.V1.Types.ResetRoomScores p0 ->
            Evergreen.V3.Types.ResetRoomScores p0


migrate_Types_ToFrontend : Evergreen.V1.Types.ToFrontend -> Evergreen.V3.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V1.Types.NoOpToFrontend ->
            Evergreen.V3.Types.NoOpToFrontend

        Evergreen.V1.Types.PlanningRoomReceived p0 ->
            Evergreen.V3.Types.PlanningRoomReceived (p0 |> Maybe.map migrate_Types_Room)
