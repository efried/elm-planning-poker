module Evergreen.Migrate.V11 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V10.Types
import Evergreen.V11.Types
import Lamdera.Migrations exposing (..)
import Maybe


frontendModel : Evergreen.V10.Types.FrontendModel -> ModelMigration Evergreen.V11.Types.FrontendModel Evergreen.V11.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V10.Types.BackendModel -> ModelMigration Evergreen.V11.Types.BackendModel Evergreen.V11.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V10.Types.FrontendMsg -> MsgMigration Evergreen.V11.Types.FrontendMsg Evergreen.V11.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V10.Types.ToBackend -> MsgMigration Evergreen.V11.Types.ToBackend Evergreen.V11.Types.BackendMsg
toBackend old =
    MsgMigrated ( migrate_Types_ToBackend old, Cmd.none )


backendMsg : Evergreen.V10.Types.BackendMsg -> MsgMigration Evergreen.V11.Types.BackendMsg Evergreen.V11.Types.BackendMsg
backendMsg old =
    MsgMigrated ( migrate_Types_BackendMsg old, Cmd.none )


toFrontend : Evergreen.V10.Types.ToFrontend -> MsgMigration Evergreen.V11.Types.ToFrontend Evergreen.V11.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V10.Types.BackendModel -> Evergreen.V11.Types.BackendModel
migrate_Types_BackendModel old =
    { games = Dict.empty, sessions = Dict.empty }


migrate_Types_FrontendModel : Evergreen.V10.Types.FrontendModel -> Evergreen.V11.Types.FrontendModel
migrate_Types_FrontendModel old =
    { game = old.game |> Maybe.map migrate_Types_Game
    , selectedCard = old.selectedCard
    , enteredGameCode = old.enteredGameCode
    , cardOptions = old.cardOptions
    , hideStats = old.hideStats
    , device = old.device
    , key = old.key
    }


migrate_Types_BackendMsg : Evergreen.V10.Types.BackendMsg -> Evergreen.V11.Types.BackendMsg
migrate_Types_BackendMsg old =
    case old of
        Evergreen.V10.Types.NoOpBackendMsg ->
            Evergreen.V11.Types.NoOpBackendMsg

        Evergreen.V10.Types.ClientConnected p0 p1 ->
            Evergreen.V11.Types.NoOpConnectionMsg p0 p1

        Evergreen.V10.Types.ClientDisconnected p0 p1 ->
            Evergreen.V11.Types.NoOpConnectionMsg p0 p1

        Evergreen.V10.Types.CodeCreated p0 p1 p2 ->
            Evergreen.V11.Types.CodeCreated p0
                p1
                p2


migrate_Types_FrontendMsg : Evergreen.V10.Types.FrontendMsg -> Evergreen.V11.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V10.Types.NoOpFrontendMsg ->
            Evergreen.V11.Types.NoOpFrontendMsg

        Evergreen.V10.Types.GameCreated ->
            Evergreen.V11.Types.GameCreated

        Evergreen.V10.Types.CardSelected p0 p1 ->
            Evergreen.V11.Types.CardSelected (p0 |> migrate_Types_Game) p1

        Evergreen.V10.Types.GameCodeEntered p0 ->
            Evergreen.V11.Types.GameCodeEntered p0

        Evergreen.V10.Types.RequestGame ->
            Evergreen.V11.Types.RequestGame

        Evergreen.V10.Types.LeftGame ->
            Evergreen.V11.Types.NoOpFrontendMsg

        Evergreen.V10.Types.ToggleStats ->
            Evergreen.V11.Types.ToggleStats

        Evergreen.V10.Types.ResetGame p0 ->
            Evergreen.V11.Types.ResetGame (p0 |> migrate_Types_Game)

        Evergreen.V10.Types.ChooseCardOptions p0 ->
            Evergreen.V11.Types.ChooseCardOptions p0

        Evergreen.V10.Types.CopyCodeToClipboard p0 ->
            Evergreen.V11.Types.CopyCodeToClipboard (p0 |> migrate_Types_Game)

        Evergreen.V10.Types.GotWindowDimensions p0 p1 ->
            Evergreen.V11.Types.GotWindowDimensions p0 p1


migrate_Types_Game : Evergreen.V10.Types.Game -> Evergreen.V11.Types.Game
migrate_Types_Game old =
    { code = old.code
    , cardOptions = old.cardOptions
    , playedCards = Dict.values old.playedCards
    }


migrate_Types_ToBackend : Evergreen.V10.Types.ToBackend -> Evergreen.V11.Types.ToBackend
migrate_Types_ToBackend old =
    case old of
        Evergreen.V10.Types.NoOpToBackend ->
            Evergreen.V11.Types.NoOpToBackend

        Evergreen.V10.Types.CreateGame p0 ->
            Evergreen.V11.Types.CreateGame p0

        Evergreen.V10.Types.JoinGame p0 ->
            Evergreen.V11.Types.JoinGame p0

        Evergreen.V10.Types.LeaveGame ->
            Evergreen.V11.Types.NoOpToBackend

        Evergreen.V10.Types.UpdatePlayerCard p0 p1 ->
            Evergreen.V11.Types.UpdatePlayerCard p0 p1

        Evergreen.V10.Types.ResetGameCards p0 ->
            Evergreen.V11.Types.ResetGameCards p0


migrate_Types_ToFrontend : Evergreen.V10.Types.ToFrontend -> Evergreen.V11.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V10.Types.NoOpToFrontend ->
            Evergreen.V11.Types.NoOpToFrontend

        Evergreen.V10.Types.CreatedGameReceived p0 ->
            Evergreen.V11.Types.CreatedGameReceived (p0 |> Maybe.map migrate_Types_Game)

        Evergreen.V10.Types.GameReceived p0 ->
            Evergreen.V11.Types.GameReceived (p0 |> Maybe.map migrate_Types_Game)

        Evergreen.V10.Types.GameReset p0 ->
            Evergreen.V11.Types.GameReset (p0 |> Maybe.map migrate_Types_Game)
